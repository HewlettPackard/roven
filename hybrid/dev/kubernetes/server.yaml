---
# Source: spire-server/templates/namespace.yaml
apiVersion: v1
kind: Namespace
metadata:
  name: spire
---
# Source: spire-server/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: spire-server
  namespace: spire
---
# Source: spire-server/templates/configmaps.yaml
# ConfigMap containing the latest trust bundle for the trust domain. It is
# updated by SPIRE using the k8sbundle notifier plugin. SPIRE agents mount
# this config map and use the certificate to bootstrap trust with the SPIRE
# server during attestation.
apiVersion: v1
kind: ConfigMap
metadata:
  name: trust-bundle
  namespace: spire
---
# Source: spire-server/templates/configmaps.yaml
# ConfigMap containing the SPIRE server configuration.
apiVersion: v1
kind: ConfigMap
metadata:
  name: spire-server
  namespace: spire
data:
  server.conf: |
    server {
      bind_address = "0.0.0.0"
      bind_port = "8081"
      socket_path = "/run/spire/sockets/api.sock"
      trust_domain = "cluster.local"
      data_dir = "/run/spire/server/data"
      log_level = "DEBUG"
      ca_key_type = "rsa-2048"

      default_jwt_svid_ttl = "1h"
      default_x509_svid_ttl = "1h"
      ca_subject = {
        country = ["US"],
        organization = ["SPIFFE"],
        common_name = "",
      }
    }

    plugins {
      DataStore "sql" {
        plugin_data {
          database_type = "sqlite3"
          connection_string = "/run/spire/data/datastore.sqlite3"
        }
      }

     NodeAttestor "hybrid" {
        plugin_cmd = "/usr/local/bin/serverattestor"
        plugin_data {
          plugins {
            k8s_psat {
              clusters = {
                "$AWS_TEST_CLUSTER" = {
                  use_token_review_api_validation = true
                  service_account_allow_list = ["spire:spire-agent"]
                }
              }
            }
            aws_iid {
              access_key_id = "$AWS_ACCESS_KEY_ID"
              secret_access_key = "$AWS_SECRET_ACCESS_KEY"
              assume_role = "$AWS_ASSUME_ROLE"
            }
          }
        }
      }

      KeyManager "disk" {
        plugin_data {
          keys_path = "/run/spire/data/keys.json"
        }
      }

      Notifier "k8sbundle" {
        plugin_data {
          namespace = "spire"
          config_map = "trust-bundle"
          config_map_key = "root-cert.pem"
        }
      }
    }

    health_checks {
      listener_enabled = true
      bind_address = "0.0.0.0"
      bind_port = "8080"
      live_path = "/live"
      ready_path = "/ready"
    }
---
# Source: spire-server/templates/controller.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: spire-controller-manager-config
  namespace: spire
data:
  spireControllerManagerConfig.yaml: |
    apiVersion: spire.spiffe.io/v1alpha1
    kind: ControllerManagerConfig
    metrics:
      bindAddress: 127.0.0.1:8082
    healthProbe:
      bindAddress: 127.0.0.1:8083
    leaderElection:
      leaderElect: true
      resourceName: 98c9c988.spiffe.io
      resourceNamespace: spire
    clusterName: "$AWS_TEST_CLUSTER"
    trustDomain: cluster.local
    ignoreNamespaces: ["kube-system", "kube-public", "local-path-storage", "spire"]
---
# Source: spire-server/templates/controller.yaml
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.4.1
  name: clusterspiffeids.spire.spiffe.io
spec:
  group: spire.spiffe.io
  names:
    kind: ClusterSPIFFEID
    listKind: ClusterSPIFFEIDList
    plural: clusterspiffeids
    singular: clusterspiffeid
  scope: Cluster
  versions:
    - name: v1alpha1
      schema:
        openAPIV3Schema:
          description: ClusterSPIFFEID is the Schema for the clusterspiffeids API
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              description: ClusterSPIFFEIDSpec defines the desired state of ClusterSPIFFEID
              properties:
                admin:
                  description: Admin indicates whether or not the SVID can be used to
                    access the SPIRE administrative APIs. Extra care should be taken
                    to only apply this SPIFFE ID to admin workloads.
                  type: boolean
                dnsNameTemplates:
                  description: DNSNameTemplate represents templates for extra DNS names
                    that are applicable to SVIDs minted for this ClusterSPIFFEID. The
                    node and pod spec are made available to the template under .NodeSpec,
                    .PodSpec respectively.
                  items:
                    type: string
                  type: array
                federatesWith:
                  description: FederatesWith is a list of trust domain names that workloads
                    that obtain this SPIFFE ID will federate with.
                  items:
                    type: string
                  type: array
                namespaceSelector:
                  description: NamespaceSelector selects the namespaces that are targetted
                    by this CRD.
                  properties:
                    matchExpressions:
                      description: matchExpressions is a list of label selector requirements.
                        The requirements are ANDed.
                      items:
                        description: A label selector requirement is a selector that
                          contains values, a key, and an operator that relates the key
                          and values.
                        properties:
                          key:
                            description: key is the label key that the selector applies
                              to.
                            type: string
                          operator:
                            description: operator represents a key's relationship to
                              a set of values. Valid operators are In, NotIn, Exists
                              and DoesNotExist.
                            type: string
                          values:
                            description: values is an array of string values. If the
                              operator is In or NotIn, the values array must be non-empty.
                              If the operator is Exists or DoesNotExist, the values
                              array must be empty. This array is replaced during a strategic
                              merge patch.
                            items:
                              type: string
                            type: array
                        required:
                          - key
                          - operator
                        type: object
                      type: array
                    matchLabels:
                      additionalProperties:
                        type: string
                      description: matchLabels is a map of {key,value} pairs. A single
                        {key,value} in the matchLabels map is equivalent to an element
                        of matchExpressions, whose key field is "key", the operator
                        is "In", and the values array contains only "value". The requirements
                        are ANDed.
                      type: object
                  type: object
                podSelector:
                  description: PodSelector selects the pods that are targetted by this
                    CRD.
                  properties:
                    matchExpressions:
                      description: matchExpressions is a list of label selector requirements.
                        The requirements are ANDed.
                      items:
                        description: A label selector requirement is a selector that
                          contains values, a key, and an operator that relates the key
                          and values.
                        properties:
                          key:
                            description: key is the label key that the selector applies
                              to.
                            type: string
                          operator:
                            description: operator represents a key's relationship to
                              a set of values. Valid operators are In, NotIn, Exists
                              and DoesNotExist.
                            type: string
                          values:
                            description: values is an array of string values. If the
                              operator is In or NotIn, the values array must be non-empty.
                              If the operator is Exists or DoesNotExist, the values
                              array must be empty. This array is replaced during a strategic
                              merge patch.
                            items:
                              type: string
                            type: array
                        required:
                          - key
                          - operator
                        type: object
                      type: array
                    matchLabels:
                      additionalProperties:
                        type: string
                      description: matchLabels is a map of {key,value} pairs. A single
                        {key,value} in the matchLabels map is equivalent to an element
                        of matchExpressions, whose key field is "key", the operator
                        is "In", and the values array contains only "value". The requirements
                        are ANDed.
                      type: object
                  type: object
                spiffeIDTemplate:
                  description: SPIFFEID is the SPIFFE ID template. The node and pod
                    spec are made available to the template under .NodeSpec, .PodSpec
                    respectively.
                  type: string
                ttl:
                  description: TTL indicates an upper-bound time-to-live for SVIDs minted
                    for this ClusterSPIFFEID. If unset, a default will be chosen.
                  type: string
                workloadSelectorTemplates:
                  description: WorkloadSelectorTemplates are templates to produce arbitrary
                    workload selectors that apply to a given workload before it will
                    receive this SPIFFE ID. The rendered value is interpreted by SPIRE
                    and are of the form type:value, where the value may, and often does,
                    contain semicolons, .e.g., k8s:container-image:docker/hello-world
                    The node and pod spec are made available to the template under .NodeSpec,
                    .PodSpec respectively.
                  items:
                    type: string
                  type: array
              required:
                - spiffeIDTemplate
              type: object
            status:
              description: ClusterSPIFFEIDStatus defines the observed state of ClusterSPIFFEID
              properties:
                stats:
                  description: Stats produced by the last entry reconciliation run
                  properties:
                    entriesMasked:
                      description: How many entries were masked by entries for other
                        ClusterSPIFFEIDs. This happens when one or more ClusterSPIFFEIDs
                        produce an entry for the same pod with the same set of workload
                        selectors.
                      type: integer
                    entriesToSet:
                      description: How many entries are to be set for this ClusterSPIFFEID.
                        In nominal conditions, this should reflect the number of pods
                        selected, but not always if there were problems encountered
                        rendering an entry for the pod (RenderFailures) or entries are
                        masked (EntriesMasked).
                      type: integer
                    entryFailures:
                      description: How many entries were unable to be set due to failures
                        to create or update the entries via the SPIRE Server API.
                      type: integer
                    namespacesIgnored:
                      description: How many (selected) namespaces were ignored (based
                        on configuration).
                      type: integer
                    namespacesSelected:
                      description: How many namespaces were selected.
                      type: integer
                    podEntryRenderFailures:
                      description: How many failures were encountered rendering an entry
                        selected pods. This could be due to either a bad template in
                        the ClusterSPIFFEID or Pod metadata that when applied to the
                        template did not produce valid entry values.
                      type: integer
                    podsSelected:
                      description: How many pods were selected out of the namespaces.
                      type: integer
                  type: object
              type: object
          type: object
      served: true
      storage: true
---
# Source: spire-server/templates/controller.yaml
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.4.1
  name: clusterfederatedtrustdomains.spire.spiffe.io
spec:
  group: spire.spiffe.io
  names:
    kind: ClusterFederatedTrustDomain
    listKind: ClusterFederatedTrustDomainList
    plural: clusterfederatedtrustdomains
    singular: clusterfederatedtrustdomain
  scope: Cluster
  versions:
    - additionalPrinterColumns:
        - jsonPath: .spec.trustDomain
          name: Trust Domain
          type: string
        - jsonPath: .spec.bundleEndpointURL
          name: Endpoint URL
          type: string
        - jsonPath: .spec.bundleEndpointProfile
          name: Endpoint Profile
          type: string
      name: v1alpha1
      schema:
        openAPIV3Schema:
          description: ClusterFederatedTrustDomain is the Schema for the clusterfederatedtrustdomains
            API
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              description: ClusterFederatedTrustDomainSpec defines the desired state
                of ClusterFederatedTrustDomain
              properties:
                bundleEndpointProfile:
                  description: BundleEndpointProfile is the profile for the bundle endpoint.
                  properties:
                    endpointSPIFFEID:
                      description: EndpointSPIFFEID is the SPIFFE ID of the bundle endpoint.
                        It is required for the "https_spiffe" profile.
                      type: string
                    type:
                      description: Type is the type of the bundle endpoint profile.
                      enum:
                        - https_spiffe
                        - https_web
                      type: string
                  required:
                    - type
                  type: object
                bundleEndpointURL:
                  description: BundleEndpointURL is the URL of the bundle endpoint.
                    It must be an HTTPS URL and cannot contain userinfo (i.e. username/password).
                  type: string
                trustDomain:
                  description: TrustDomain is the name of the trust domain to federate
                    with (e.g. example.org)
                  pattern: '[a-z0-9._-]{1,255}'
                  type: string
                trustDomainBundle:
                  description: TrustDomainBundle is the initial contents of the bundle
                    for the referenced trust domain. This field is optional.
                  type: string
              required:
                - bundleEndpointProfile
                - bundleEndpointURL
                - trustDomain
              type: object
            status:
              description: ClusterFederatedTrustDomainStatus defines the observed state
                of ClusterFederatedTrustDomain
              type: object
          type: object
      served: true
      storage: true
---
# Source: spire-server/templates/controller.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: manager-role
rules:
  - apiGroups: [""]
    resources: ["namespaces"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["admissionregistration.k8s.io"]
    resources: ["validatingwebhookconfigurations"]
    verbs: ["get", "list", "patch", "watch"]
  - apiGroups: [""]
    resources: ["nodes"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["spire.spiffe.io"]
    resources: ["clusterfederatedtrustdomains"]
    verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
  - apiGroups: ["spire.spiffe.io"]
    resources: ["clusterfederatedtrustdomains/finalizers"]
    verbs: ["update"]
  - apiGroups: ["spire.spiffe.io"]
    resources: ["clusterfederatedtrustdomains/status"]
    verbs: ["get", "patch", "update"]
  - apiGroups: ["spire.spiffe.io"]
    resources: ["clusterspiffeids"]
    verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
  - apiGroups: ["spire.spiffe.io"]
    resources: ["clusterspiffeids/finalizers"]
    verbs: ["update"]
  - apiGroups: ["spire.spiffe.io"]
    resources: ["clusterspiffeids/status"]
    verbs: ["get", "patch", "update"]
---
# Source: spire-server/templates/roles.yaml
# Required cluster role to allow spire-server to query k8s API server
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: spire-server-cluster-role
  namespace: spire
rules:
  - apiGroups:
      - ""
    resources:
      - nodes
    verbs:
      - get
  - apiGroups:
      - authentication.k8s.io
    resources:
      - tokenreviews
    verbs:
      - get
      - create
---
# Source: spire-server/templates/controller.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: manager-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: manager-role
subjects:
  - kind: ServiceAccount
    name: spire-server
    namespace: spire
---
# Source: spire-server/templates/roles.yaml
# Binds above cluster role to spire-server service account
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: spire-server-cluster-role-binding
  namespace: spire
subjects:
  - kind: ServiceAccount
    name: spire-server
    namespace: spire
roleRef:
  kind: ClusterRole
  name: spire-server-cluster-role
  apiGroup: rbac.authorization.k8s.io
---
# Source: spire-server/templates/controller.yaml
# permissions to do leader election.
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: leader-election-role
  namespace: spire
rules:
  - apiGroups: [""]
    resources: ["configmaps"]
    verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
  - apiGroups: ["coordination.k8s.io"]
    resources: ["leases"]
    verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["create", "patch"]
---
# Source: spire-server/templates/roles.yaml
# Role for the SPIRE server
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  namespace: spire
  name: spire-server-role
rules:
  - apiGroups:
      - ""
    resources:
      - pods
    verbs:
      - get
  - apiGroups:
      - ""
    resourceNames:
      - trust-bundle
    resources:
      - configmaps
    verbs:
      - get
      - patch
---
# Source: spire-server/templates/controller.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: leader-election-rolebinding
  namespace: spire
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: leader-election-role
subjects:
  - kind: ServiceAccount
    name: spire-server
    namespace: spire
---
# Source: spire-server/templates/roles.yaml
# RoleBinding granting the spire-server-role to the SPIRE server
# service account.
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: spire-server-role-binding
  namespace: spire
subjects:
  - kind: ServiceAccount
    name: spire-server
    namespace: spire
roleRef:
  kind: Role
  name: spire-server-role
  apiGroup: rbac.authorization.k8s.io
---
# Source: spire-server/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: spire-server
  namespace: spire
spec:
  type: NodePort
  ports:
    - name: api
      port: 8081
      protocol: TCP
      targetPort: 8081
  selector:
    app: spire-server
---
# Source: spire-server/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: spire-server-bundle-endpoint
  namespace: spire
spec:
  type: NodePort
  ports:
    - name: api
      port: 8443
      protocol: TCP
  selector:
    app: spire-server
---
# Source: spire-server/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: spire-controller-manager-webhook-service
  namespace: spire
spec:
  type: NodePort
  ports:
    - port: 443
      protocol: TCP
      targetPort: 9443
  selector:
    app: spire-server
---
# Source: spire-server/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: spire-server
  namespace: spire
  labels:
    app: spire-server
spec:
  replicas: 1
  selector:
    matchLabels:
      app: spire-server
  serviceName: spire-server
  template:
    metadata:
      namespace: spire
      labels:
        app: spire-server
    spec:
      serviceAccountName: spire-server
      shareProcessNamespace: true
      containers:
        - name: spire-server
          image: public.ecr.aws/n9c4h4j5/hybrid-attestor-server:latest-local
          imagePullPolicy: Always
          args: ["-config", "/run/spire/config/server.conf"]
          livenessProbe:
            httpGet:
              path: /live
              port: 8080
            failureThreshold: 2
            initialDelaySeconds: 15
            periodSeconds: 60
            timeoutSeconds: 3
          readinessProbe:
            httpGet:
              path: /ready
              port: 8080
            initialDelaySeconds: 5
            periodSeconds: 5
          ports:
            - containerPort: 8081
          volumeMounts:
            - name: spire-config
              mountPath: /run/spire/config
              readOnly: true
            - name: spire-data
              mountPath: /run/spire/data
              readOnly: false
            - name: spire-registration-socket
              mountPath: /run/spire/sockets
              readOnly: false
        - name: spire-controller-manager
          image: ghcr.io/spiffe/spire-controller-manager:0.2.1
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 9443
          args:
            - "--config=spireControllerManagerConfig.yaml"
          volumeMounts:
            - name: spire-registration-socket
              mountPath: /spire-server
              readOnly: true
            - name: spire-controller-manager-config
              mountPath: /spireControllerManagerConfig.yaml
              subPath: spireControllerManagerConfig.yaml
      volumes:
        - name: spire-config
          configMap:
            name: spire-server
        - name: spire-registration-socket
          hostPath:
            path: /run/spire/server-sockets
            type: DirectoryOrCreate
        - name: spire-controller-manager-config
          configMap:
            name: spire-controller-manager-config
  volumeClaimTemplates:
    - metadata:
        name: spire-data
        namespace: spire
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 1Gi
---
# Source: spire-server/templates/controller.yaml
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  name: spire-controller-manager-webhook
webhooks:
  - admissionReviewVersions: ["v1"]
    clientConfig:
      service:
        name: spire-controller-manager-webhook-service
        namespace: spire
        path: /validate-spire-spiffe-io-v1alpha1-clusterfederatedtrustdomain
    failurePolicy: Fail
    name: vclusterfederatedtrustdomain.kb.io
    rules:
      - apiGroups: ["spire.spiffe.io"]
        apiVersions: ["v1alpha1"]
        operations: ["CREATE", "UPDATE"]
        resources: ["clusterfederatedtrustdomains"]
    sideEffects: None
  - admissionReviewVersions: ["v1"]
    clientConfig:
      service:
        name: spire-controller-manager-webhook-service
        namespace: spire
        path: /validate-spire-spiffe-io-v1alpha1-clusterspiffeid
    failurePolicy: Fail
    name: vclusterspiffeid.kb.io
    rules:
      - apiGroups: ["spire.spiffe.io"]
        apiVersions: ["v1alpha1"]
        operations: ["CREATE", "UPDATE"]
        resources: ["clusterspiffeids"]
    sideEffects: None
